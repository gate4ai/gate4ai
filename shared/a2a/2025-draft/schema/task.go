package schema

import (
	"time"
)

// TaskState represents the lifecycle states of a task.
type TaskState string

const (
	// TaskStateSubmitted indicates the task has been received but not yet started processing.
	TaskStateSubmitted TaskState = "submitted"
	// TaskStateWorking indicates the task is actively being processed by the agent.
	TaskStateWorking TaskState = "working"
	// TaskStateInputRequired indicates the agent requires additional input from the client to proceed.
	TaskStateInputRequired TaskState = "input-required"
	// TaskStateCompleted indicates the task finished successfully.
	TaskStateCompleted TaskState = "completed"
	// TaskStateCanceled indicates the task was canceled before completion.
	TaskStateCanceled TaskState = "canceled"
	// TaskStateFailed indicates the task failed due to an error.
	TaskStateFailed TaskState = "failed"
	// TaskStateUnknown indicates the task state cannot be determined.
	TaskStateUnknown TaskState = "unknown"
)

// TaskStatus represents the status of a task at a specific point in time.
type TaskStatus struct {
	// The current state of the task.
	State TaskState `json:"state"`
	// An optional message associated with this status (e.g., progress update, final response text, input prompt).
	Message *Message `json:"message,omitempty"`
	// ISO 8601 timestamp when this status was recorded.
	Timestamp time.Time `json:"timestamp"`
}

// Task represents a unit of work being processed by an agent.
type Task struct {
	// Unique identifier for the task.
	ID string `json:"id"`
	// Optional identifier to group related tasks into a session.
	SessionID *string `json:"sessionId,omitempty"`
	// The current status of the task.
	Status TaskStatus `json:"status"`
	// List of artifacts generated by the task (e.g., files, results). Null if no artifacts yet.
	Artifacts []Artifact `json:"artifacts,omitempty"`
	// Optional: History of messages exchanged for this task (populated if historyLength requested). Null if not requested or not available.
	History []Message `json:"history,omitempty"`
	// Optional metadata associated with the task.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}
