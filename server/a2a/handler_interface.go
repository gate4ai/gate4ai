package a2a

import (
	"context"

	a2aSchema "github.com/gate4ai/gate4ai/shared/a2a/2025-draft/schema"
	"go.uber.org/zap"
)

// A2AYieldUpdate represents the possible types of updates an A2AHandler can yield back to the capability layer.
type A2AYieldUpdate struct {
	// Status update (e.g., "working", "completed", "input-required"). Use a pointer to differentiate from artifact updates.
	Status *a2aSchema.TaskStatus `json:"status,omitempty"`
	// Artifact generated by the agent. Use a pointer to differentiate from status updates.
	Artifact *a2aSchema.Artifact `json:"artifact,omitempty"`
	// If the handler encounters a specific error condition that should be reported to the client,
	// it can yield this error. This will typically result in a "failed" task status.
	Error *a2aSchema.JSONRPCError `json:"error,omitempty"`
}

// A2AHandler defines the function signature for the core logic implementation of an A2A agent.
// This function is responsible for the "business logic" of handling a task.
//
// Parameters:
//   - ctx: A context.Context that allows the capability layer to signal cancellation (e.g., if the client sends tasks/cancel or disconnects). The handler should respect this cancellation.
//   - task: A snapshot of the current a2aSchema.Task object, including its ID, status, history, and any existing artifacts. The handler should *not* modify this object directly but use the `updates` channel.
//   - updates: A write-only channel (`chan<-`) for the handler to send back `A2AYieldUpdate` messages (status changes, new artifacts, or specific errors) to the capability layer asynchronously. The handler MUST close this channel when it finishes processing or encounters a fatal error.
//   - logger: A zap.Logger instance pre-configured with the task ID for contextual logging within the handler.
//
// Returns:
//   - error:
//   - If nil: The handler finished its processing successfully. The final task status should have been sent via the `updates` channel (e.g., completed, input-required).
//   - If non-nil and of type *a2aSchema.JSONRPCError: The handler requests the task be marked as "failed" and this specific error be returned to the client.
//   - If non-nil and any other Go error type: Indicates an unexpected internal error within the handler. The capability layer will log this error and return a generic internal server error to the client, marking the task as "failed".
//
// The handler function will typically run in its own goroutine managed by the A2ACapability.
type A2AHandler func(ctx context.Context, task *a2aSchema.Task, updates chan<- A2AYieldUpdate, logger *zap.Logger) error
