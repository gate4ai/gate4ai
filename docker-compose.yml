version: '3.8'

services:
  portal:
    build:
      context: ./portal
      dockerfile: Dockerfile
    container_name: gate4ai-portal
    restart: unless-stopped
    ports:
      - "${PORTAL_PORT:-3000}:3000" # Expose portal port
    environment:
      # Passed to the Nuxt runtime config and used by Prisma client
      GATE4AI_DATABASE_URL: ${GATE4AI_DATABASE_URL}
      # JWT Secret for the portal's internal API
      JWT_SECRET: ${JWT_SECRET}
      # Make API base URL configurable if needed, defaults to /api inside container
      # NUXT_PUBLIC_API_BASE_URL: /api
      # Ensure HOST is set for Nuxt to listen on all interfaces within the container
      HOST: '0.0.0.0'
      PORT: 3000
    depends_on:
      db:
        condition: service_healthy # Wait for db to be healthy
    networks:
      - gate4ai-network
    # Add entrypoint/command to run migrations if not handled inside Dockerfile CMD
    # command: sh -c "npx prisma migrate deploy && node .output/server/index.mjs"

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: gate4ai-gateway
    restart: unless-stopped
    ports:
      - "${GATEWAY_PORT:-8080}:8080" # Expose gateway port
    environment:
      # Gateway reads DB URL and other settings from the database,
      # but it needs the DB URL to connect initially.
      GATE4AI_DATABASE_URL: ${GATE4AI_DATABASE_URL}
    depends_on:
      db:
        condition: service_healthy
      portal: # Optional: wait for portal if gateway proxies to it and needs it running
        condition: service_started
    networks:
      - gate4ai-network

  db:
    image: postgres:17-alpine
    container_name: gate4ai-db
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist data
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-gate4ai_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-gate4ai_db}
    ports:
      - "${POSTGRES_PORT:-5432}:5432" # Expose DB port (optional, for external access/debug)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gate4ai_user} -d ${POSTGRES_DB:-gate4ai_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gate4ai-network

  mailhog: # Optional: For catching emails sent by the portal (e.g., verification)
    image: mailhog/mailhog:latest
    container_name: gate4ai-mailhog
    restart: unless-stopped
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025" # SMTP port
      - "${MAILHOG_HTTP_PORT:-8025}:8025" # Web UI port
    networks:
      - gate4ai-network

networks:
  gate4ai-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local