services:
  db: # Database service
    image: postgres:17-alpine
    container_name: gate4ai-db-${APP_ENV:-prod}
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - db_backups:/backups
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-gate4ai_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-gate4ai_db}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gate4ai-network

  db-init: # Service for initialization
    image: gate4ai/portal-db-init:${VERSION:-latest}
    container_name: gate4ai-db-init-${APP_ENV:-prod}
    command: ["sh", "/app/init-db.sh"]
    environment:
      GATE4AI_DATABASE_URL: "postgresql://${POSTGRES_USER:-gate4ai_user}:${POSTGRES_PASSWORD:-changeme}@db:5432/${POSTGRES_DB:-gate4ai_db}?schema=public&sslmode=disable"
      POSTGRES_USER: ${POSTGRES_USER:-gate4ai_user} # Script uses this for pg_isready
    depends_on:
      db:
        condition: service_healthy # Wait for the DB to be healthy
    networks:
      - gate4ai-network

  portal:
    image: gate4ai/portal:${VERSION:-latest} # This now refers to the smaller runtime image
    container_name: gate4ai-portal-${APP_ENV:-prod}
    restart: unless-stopped
    ports:
      - "${PORTAL_PORT:-3000}:3000"
    environment:
      GATE4AI_DATABASE_URL: "postgresql://${POSTGRES_USER:-gate4ai_user}:${POSTGRES_PASSWORD:-changeme}@db:5432/${POSTGRES_DB:-gate4ai_db}?schema=public&sslmode=disable"
      NUXT_JWT_SECRET: ${NUXT_JWT_SECRET}
      HOST: '0.0.0.0'
      PORT: 3000
      NODE_ENV: ${NODE_ENV:-production}
    depends_on:
      db-init:
        condition: service_completed_successfully
    networks:
      - gate4ai-network
    # The CMD ["node", ".output/server/index.mjs"] from the Dockerfile will run

  gateway:
    image: gate4ai/gateway:${VERSION:-latest}
    container_name: gate4ai-gateway-${APP_ENV:-prod}
    restart: unless-stopped
    ports:
      - "${GATEWAY_PORT:-8080}:8080"
    environment:
      GATE4AI_DATABASE_URL: "postgresql://${POSTGRES_USER:-gate4ai_user}:${POSTGRES_PASSWORD:-changeme}@db:5432/${POSTGRES_DB:-gate4ai_db}?sslmode=disable"
    depends_on:
      # The gateway also depends on the database being initialized.
      db-init:
        condition: service_completed_successfully
    networks:
      - gate4ai-network

  example-server: # Example server can start independently
    image: gate4ai/example-server:${VERSION:-latest}
    container_name: gate4ai-example-server-${APP_ENV:-prod}
    restart: unless-stopped
    ports:
      - "${SERVER_PORT:-4000}:4000"
    networks:
      - gate4ai-network

networks:
  gate4ai-network:
    driver: bridge
    name: gate4ai-network-${APP_ENV:-prod}

volumes:
  postgres_data:
    name: postgres_data_${APP_ENV:-prod}
  db_backups:
    name: db_backups_${APP_ENV:-prod}
    driver: local
    driver_opts:
      type: none
      device: ${BACKUP_BASE_DIR:-./backups}/${APP_ENV} # Provide a default local path for backups
      o: bind